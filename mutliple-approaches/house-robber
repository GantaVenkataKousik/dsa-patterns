It's highly importnat to know multiple different approaches
because 
it was not always rt the solution known by u works

for example 
in a contest

I got a different variant of 
house robber 
question given n and k 
we need to return in how many ways that
a robber can rob exactly k houses from n 


as we are familiar with diff and straight froward ones like

house robber 1 & 2 & 4
which primarily focuses on 

findint the maximum amount can the robber loot from teh houses without a
restiction in 1 & 2
with condiction of atleast k houses in 4


when I have written this approach 



class Solution {
    public static int mod=1000000007;
    public static void solve(int n,int k,int index,int[] cnt){
        if(k==0){
            cnt[0]=(cnt[0]%mod)+1;
            return ;
        }
        if(index>=n)return ;
        solve(n,k-1,index+2,cnt);
        solve(n,k,index+1,cnt);
        return ;
    }
    
    
    public static int houseRobWays(int n, int k) {
        int cnt[]=new int[1];
        solve(n,k,0,cnt);
        return cnt[0];
    }
}


it was resulted in TLE

adn when I optimised it 

to 

using DP 
[n][k]
always remember when there are main entities 
dp can't be single


class Solution {
    public static int mod=1000000007;
    // public static int solve(int n,int k,int index,int[][] dp){
    //     if(k==0){
    //         return 1;
    //     }
    //     if(index>=n)return 0;
    //     if(dp[index][k]!=-1)return dp[index][k];
        
    //     int rob=solve(n,k-1,index+2,dp)%mod;
    //     int skip=solve(n,k,index+1,dp)%mod;
        
    //     dp[index][k]=(rob+skip)%mod;
    //     return dp[index][k];
    // }
    
    
    public static int houseRobWays(int n, int k) {
        // int cnt[]=new int[1];
        // if(k==0)return 1;
        if(n<k)return 0;
        int dp[][]=new int[n+1][k+1];
        for(int i=0;i<=n;i++){
            dp[i][0]=1;
        }
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=k;j++){
                dp[i][j]=dp[i-1][j]%mod;
                if(i>1){
                    dp[i][j]=(dp[i][j]+dp[i-2][j-1])%mod;
                }
                else if(j==1){
                    dp[i][j]=(dp[i][j]+1)%mod;
                }
            }
        }
        return dp[n][k];
        
    }
}

it resulted in Memory error

tehn updated to this





class Solution {
  
    // public static int solve(int n,int k,int index,int[][] dp){
    //     if(k==0){
    //         return 1;
    //     }
    //     if(index>=n)return 0;
    //     if(dp[index][k]!=-1)return dp[index][k];
        
    //     int rob=solve(n,k-1,index+2,dp)%mod;
    //     int skip=solve(n,k,index+1,dp)%mod;
        
    //     dp[index][k]=(rob+skip)%mod;
    //     return dp[index][k];
    // }
    public static final int mod=1000000007;
    public static final int MAX_SIZE=100005;
    
    
    private static long[] factorialArray=new long[MAX_SIZE];
    private static long[] inverseFactorialArray = new long[MAX_SIZE];
    private static boolean isPrecomputed=false;
    
    private static void computeFactorials(){
        if(!isPrecomputed){
            factorialArray[0]=1;
            for(int i=1;i<MAX_SIZE;i++){
                factorialArray[i]=(factorialArray[i-1]*i)%mod;
            }
            inverseFactorialArray[MAX_SIZE-1]=modularInverse(
                factorialArray[MAX_SIZE-1],mod);
            for(int i=MAX_SIZE-2;i>=0;i--){
                inverseFactorialArray[i]=(inverseFactorialArray[i+1]*
                (i+1))%mod;
            }
            isPrecomputed=true;
        }
    }
    
    private static long modularInverse(long base,long mod){
        return power(base,mod-2,mod);
    }
    
    private static long power(long base,long exponent,long mod){
        long result=1;
        base=base%mod;
        while(exponent>0){
            if((exponent&1)==1){
                result=(result*base)%mod;
            }
            exponent>>=1;
            base=(base*base)%mod;
        }
        return result;
    }
    private static long combinations(int total,int choose){
        if(choose<0 || choose>total)return 0;
         return (factorialArray[total] * 
         inverseFactorialArray[choose] % mod * 
         inverseFactorialArray[total - choose] % mod) % mod;

    }
    
    private static int calcualteRobWays(int totalHouses,int housesToRob){
        computeFactorials();
        if(housesToRob>totalHouses-housesToRob+1){
            return 0;
        }
        return (int)(combinations(totalHouses-housesToRob+1,housesToRob)%mod);
    }
    
    
    public static int houseRobWays(int n, int k) {
        return calcualteRobWays(n,k);
        
    }
}

where I have seen this kind of approach somewhere 

