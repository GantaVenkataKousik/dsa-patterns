Link:
https://leetcode.com/problems/k-th-largest-perfect-subtree-size-in-binary-tree/

Code:
class Solution {
    public static Pair<Boolean,Integer> findPerfect(TreeNode root,List<Integer> sizes){
        if(root==null)return new Pair<>(true,0);
        Pair<Boolean,Integer> left=findPerfect(root.left,sizes);
        Pair<Boolean,Integer> right=findPerfect(root.right,sizes);
        if(left.getKey() && right.getKey() && left.getValue().equals(right.getValue())){
            int subTree=left.getValue()+right.getValue()+1;
            sizes.add(subTree);
            return new Pair<>(true,subTree);
        }
        return new Pair<>(false,0);
    }

    public int kthLargestPerfectSubtree(TreeNode root, int k) {

        List<Integer> sizes=new ArrayList<>();
        findPerfect(root,sizes);
        Collections.sort(sizes,Collections.reverseOrder());
        if(sizes.size()<k)return -1;
        return sizes.get(k-1);
    }
}
