Pattern:
1.
using Stack to remove pair parentheis first
then 
making our computation with remaining ones

Code:
class Solution {
    public int minAddToMakeValid(String s) {
        Stack<Character> st = new Stack<>();
        int ans=0;
        for(char ch:s.toCharArray()){
            if(st.isEmpty())st.push(ch);
            else if(st.peek()=='(' && ch==')')st.pop();
            else if(ch==')')ans++;
            else{
                st.push('(');
            }
        }
        return ans+st.size();
    }
}

2.
Same pattern 
now minimum swaps to make parenthesis valid

Link:
https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-string-balanced/
    public int minSwaps(String s) {
        Stack<Character> st = new Stack<>();
        for(char ch:s.toCharArray()){
            if(st.isEmpty()){
                if(ch=='[')st.push('[');
            }
            else if(ch==']' && st.peek()=='['){
                st.pop();
            }
            else st.push('[');
        }
        int ans=st.size();
        return (int)Math.ceil(ans/2.0);
    }
}
