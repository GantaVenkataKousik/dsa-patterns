Basically adding the counts from previous rows and columns

1.
Link:
https://leetcode.com/problems/unique-paths/?envType=problem-list-v2&envId=dynamic-programming

Code:
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for(int i=0;i<n;i++)dp[0][i]=1;
        for(int i=0;i<m;i++)dp[i][0]=1;
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
}


2.
same now finding min so 
will find the first row and column consecutive sums
then 
while traversing from second row and 
second column

will check the previous sum and current element and
decide wether to move forward by storing the minimum count decides
which path we are choosing

Link:
https://leetcode.com/problems/minimum-path-sum/description/
Code:
class Solution {
    public int minPathSum(int[][] grid) {
        int n=grid.length,m=grid[0].length;
        int[][] dp = new int[n][m];
        dp[0][0]=grid[0][0];
        for(int i=1;i<m;i++){
            dp[0][i]=grid[0][i]+dp[0][i-1];
        }
        for(int i=1;i<n;i++){
            dp[i][0]=grid[i][0]+dp[i-1][0];
        }
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                dp[i][j]=Math.min(grid[i][j]+dp[i][j-1],grid[i][j]+dp[i-1][j]);
            }
        }
        return dp[n-1][m-1];
    }
}


3.

just checking the right, top-right diagonal, bottom-right-diagonal
and choosing the path to move on

Link:
https://www.geeksforgeeks.org/problems/gold-mine-problem2608/

Code:
class Solution{
    static int find(int i,int j,int[][] arr,int n,int m,int[][] dp){
        if(i==n||j==m||i==-1||j==-1) return 0;
        return (dp[i][j]!=-1)?dp[i][j]:(dp[i][j]=arr[i][j]+
        Math.max(find(i-1,j+1,arr,n,m,dp),
        Math.max(find(i+1,j+1,arr,n,m,dp),find(i,j+1,arr,n,m,dp))));
    }
    static int maxGold(int n, int m, int mn[][])
    {
        // code here
        int ans=0;
        int[][] dp=new int[n][m];
        for(int[] t: dp) Arrays.fill(t,-1);
        for(int i=0;i<n;i++) ans=Math.max(ans,find(i,0,mn,n,m,dp));
        return ans;
    }
}
